4. When the JMPC field in a microinstruction is enabled, MBR is ORed with NEXT AD-
DRESS to form the address of the next microinstruction. Are there any circumstances
in which it makes sense to have NEXT ADDRESS be 0x1FF and use JMPC?

Max MBR Value = 0x0FF (8bits)
NEXT_ADDRESS = 0x1FF

0x000 || 0x1FF = 0x1FF
0x001 || 0x1FF = 0x1FF
0x002 || 0x1FF = 0x1FF [...]
0x0FF || 0x1FF = 0x1FF

No. If NEXT_ADDRESS = 0x1FF, any MBR value will result 0x1FF.

5. Suppose that in the example of Fig. 4-14(a) the statement
k = 5; 
is added after the if statement. What would the new assembly code be? Assume that
the compiler is an optimizing compiler.

i = j + k;
if (i == 3)
    k = 5;
    k = 0;
else
    j = j − 1;

ILOAD j                         // i = j + k 0x15 0x02
ILOAD k 0x15 0x03
IADD 0x60
ISTORE i 0x36 0x01
ILOAD i                         // if (i == 3) 0x15 0x01
BIPUSH 3 0x10 0x03
IF ICMPEQ L1 0x9F 0x00 0x0D
ILOAD j                         // j = j − 1 0x15 0x02
BIPUSH 1 0x10 0x01
ISUB 0x64
ISTORE j 0x36 0x02
GOTO L2 0xA7 0x00 0x07
L1: BIPUSH 0                    // k = 0 0x10 0x00
ISTORE k 0x36 0x03
L2:

In a optimized compiler, the new assembly code will be the same, because new statement is overwritten by k = 0;

6. Give two different IJVM translations for the following Java statement:

i = k + n + 5;

ILOAD k
ILOAD n
IADD
BIPUSH 0x5
IADD
ISTORE i

BIPUSH 0x5
ILOAD n
ILOAD k
IADD
IADD
ISTORE i

7. Give the Java statement that produced the following IJVM code:
ILOAD j
ILOAD n
ISUB
BIPUSH 7
ISUB
DUP
IADD
ISTORE i

STACK:

                        n           7                       j-n-7           
            j           j           j-n         j-n         i-n-7       j-n-7       2(j*n*7)
            1           2           3           4           5           6           7           8

i = 2 * (j*n*7);

8. In the text we mentioned that when translating the statement
if (Z) goto L1; else goto L2
to binary, L2 has to be in the bottom 256 words of the control store. Would it not be
equally possible to have L1 at, say, 0x40 and L2 at 0x140? Explain your answer.

To do this, it's needed to add an not port in Z pin of ULA. Without this, is not possible.

9. In the microprogram for Mic-1, in if_icmpeq3, MDR is copied to H. A few lines later it
is subtracted from TOS to check for equality. Surely it is better to have one statement:
if_cmpeq3 Z = TOS − MDR; rd
Why is this not done?

Because it's needed to change TOS value, after copy MDR to H, and before subtracted it from TOS

10. How long does a 2.5-GHz Mic-1 take to execute the following Java statement
i = j + k; 
Give your answer in nanoseconds.

ILOAD j -> 5 + 1
ILOAD k -> 5 + 1
IADD -> 3 + 1
ISTORE i -> 6 + 1

27 cycles.

1 cycle = 0.4 nanoseconds

27 cycles = 10.8 nanoseconds

11. Repeat the previous question, only now for a 2.5-GHz Mic-2. Based on this calcula-
tion, how long would a program that runs for 100 sec on the Mic-1 take on the Mic-2?

ILOAD j -> 3 + 1
ILOAD k -> 3 + 1
IADD -> 3 + 1
ISTORE i -> 5 + 1

18 cycles.

1 cycle = 0.4 nanoseconds

18 cycles = 7.2 nanoseconds

ratio: 10.8 / 7.2 = 1.5

A program that runs for 100 sec on Mic-1 will take 66.666 seconds on Mic-2

12. Write microcode for the Mic-1 to implement the JVM POPTWO instruction. This in-
struction removes two words from the top of the stack.

POP

MAR -> Memory Address Register
SP -> Stack Pointer
TOS -> Top of Stack
MDR -> Memory Data Register

POP:

pop1:   MAR = SP = SP - 1; rd        /// Read in netx-to-top word on stack
pop2:                                /// Wait for read
pop3:   TOS = MDR; goto(MBR1)        /// Copy new word to TOS

POPTWO:

poptwo1:    MAR = SP = SP - 1;
poptwo3:    MAR = SP = SP - 1; rd        /// Read in netx-to-top word on stack
poptwo4:                                /// Wait for read
poptwo5:    TOS = MDR; goto(MBR1)        /// Copy new word to TOS

poptwo1:    MAR = SP = SP -1; goto(POP)

13. On the full JVM machine, there are special 1-byte opcodes for loading locals 0 through
3 onto the stack instead of using the general ILOAD instruction. How should IJVM be
modified to make the best use of these instructions?

14. The instruction ISHR (arithmetic shift right integer) exists in JVM but not in IJVM. It
uses the top two values on the stack, replacing them with a single value, the result.
The second-from-top word of the stack is the operand to be shifted. Its content is
shifted right by a value between 0 and 31, inclusive, depending on the value of the 5
least significant bits of the top word on the stack (the other 27 bits of the top word are
ignored). The sign bit is replicated to the right for as many bits as the shift count. The
opcode for ISHR is 122 (0x7A).

a. What is the arithmetic operation equivalent to left shift with a count of 2?

0x10000000 = 128

0x10000000 >> 2 = 0x100000 = 64

half the value

b. Extend the microcode to include this instruction as a part of IJVM.

ishr1 MAR = SP = SP - 1; read
ishr2 OPC = TOS
ishr3 MDR = MDR >> 1
ishr4 OPC = OPC - 1; if(Z) goto ishr5; else goto ishr3
ishr5 TOS = MDR; write; goto main1

15. The instruction ISHL (shift left integer) exists in JVM but not in IJVM. It uses the top
two values on the stack, replacing the two with a single value, the result. The sec-
ond-from-top word of the stack is the operand to be shifted. Its content is shifted left
by a value between 0 and 31, inclusive, depending on the value of the 5 least signifi-
cant bits of the top word on the stack (the other 27 bits of the top word are ignored).
Zeros are shifted in from the right for as many bits as the shift count. The opcode for
ISHL is 120 (0x78).

a. What is the arithmetic operation equivalent to shifting left with a count of 2?

0x10000000 = 128

0x10000000 << 2 = 0x1000000000 = 256

Double the value.

b. Extend the microcode to include this instruction as a part of IJVM.

ishr1 MAR = SP = SP - 1; read
ishr2 OPC = TOS
ishr3 H = MDR
ishr4 MDR = MDR + H
ishr5 OPC = OPC - 1; if(Z) goto ishr6; else goto ishr3
ishr6 TOS = MDR; write; goto main1

16. The JVM INVOKEVIRTUAL instruction needs to know how many parameters it has.
Why?

Because to start the execution of invoked method, the parameters must be passed to stack

17. Implement the JVM DLOAD instruction for the Mic-2. It has a 1-byte index and pushes
the local variable at this position onto the stack. Then it pushes the next higher word
onto the stack as well.

dload1 MAR = LV + MBR1U; rd
dload2 H = MAR + 1
dload3 MAR = SP = SP + 1; wr
dload4 MAR = H; rd
dload5 MAR = SP = SP + 1; wr
dload6 TOS = MDR; goto (MBR)

18. Draw a finite state machine for tennis scoring. The rules of tennis are as follows. To
win, you need at least four points and you must have at least two points more than
your opponent. Start with a state (0, 0) indicating that no one has scored yet. Then
add a state (1, 0) meaning that A has scored. Label the arc from (0, 0) to (1, 0) with an
A. Now add a state (0, 1) indicating that B has scored, and label the arc from (0, 0)
with a B. Continue adding states and arcs until all the possible states have been
included.

(a,b)
(0,0)---→(1,0)---→(2,0)---→(3,0)---→(a w)←--------|
  ↓        ↓        ↓        ↓       ↑ ↑          |
(0,1)---→(1,1)---→(2,1)---→(3,1)-----| |          |
  ↓        ↓        ↓        ↓         |          |
(0,2)---→(1,2)---→(2,2)---→(3,2)-------| |-----(a's ad)
  ↓        ↓        ↓                  ↓ ↓        ↑
(0,3)---→(1,3)---→(2,3)-------------→(deuce)------|
  ↓        ↓        ↓                  ↑ ↑        ↓
(b w)←---------------------------------| |-----(b's ad)
   ↑                                              |
   |----------------------------------------------|

19. Reconsider the previous problem. Are there any states that could be collapsed without
changing the result of any game? If so, which ones are equivalent?

Yes, deuce and 1,1 and 2,2 are equivalent.
(2,3) and (3,2) ca be equivalent with (a's ad) and (b's ad)

20. Draw a finite-state machine for branch prediction that is more tenacious than Fig. 4-42.
It should change only predictions after three consecutive mispredictions.

                           __________________________________________
                          |                                          ↓ 
(000)------>(001)------>(011)          (100)<-------(110)<---------(111)
  ↑___________|___________|              |____________|______________↑
  |______________________________________|

21. The shift register of Fig. 4-27 has a maximum capacity of 6 bytes. Could a cheaper
version of the IFU be built with a 5-byte shift register? How about a 4-byte one?

A cheaper version of IFU built with a 5-byte shift registers will work. 
But a 4-byte version will not work when only 1 byte left in the queue and MBR2 were referenced.

22. Having examined cheaper IFUs in the previous question, now let us examine more ex-
pensive ones. Would there ever be any point to have a much larger shift register in the
IU, say, 12 bytes? Why or why not?

Definitely. We have been assuming a 100% cache hit rate so far. That is
unrealistic. Sometimes a memory fetch will be a cache miss and take a long
time. Having a large queue of previously fetched bytes will allow the
machine to continue to run even when a memory reference takes a long time.
Thus during much of the long memory fetch time the CPU may still be running. 
With a small shift register in the IFU it may have to stall much earlier

23. In the microprogram for the Mic-2, the code for if icmpeq6 goes to T when Z is set to
1. However, the code at T is the same as goto1. Would it have been possible to go to
goto1 directly? Would doing so have made the machine faster?

Remember that due to the way branching works, the true addresses must be
exactly 0x100 more than the false address. By always pairing T and F, it is
easy to make sure they are at a distance of 0x100. On the other hand, all the
conditional branches end up at T if taken and then go to GOTO 1, so if
GOTO 1 were positioned at exactly 0x100 above F, it would have worked.
Doing so would have saved 1 word of control store, but it would not have
made the machine any faster.

24. In the Mic-4, the decoding unit maps the IJVM opcode onto the ROM index where the
corresponding micro-operations are stored. It would seem to be simpler to just omit
the decoding stage and feed the IJVM opcode into the queueing directly. It could use
the IJVM opcode as an index into the ROM, the same way as the Mic-1 works. What
is wrong with this plan?

The main problem is that the micro-operations have to be in sequence so they
can be read out efficiently. The IJVM opcode for POP is 0x57, so its
sequence would have to begin there. The trouble is, this sequence is three
micro-operations long, so they would go in slots 0x57, 0x58, and 0x59. 
However, DUP must begin in 0x59, so there is a conflict. In addition, the scheme
used in the Mic-4 allows the micro-operations to be packed densely. If there
are k micro-operations in all, then only k table entries are needed. In a
scheme like the one the Mic-1 has, at least 256 entries are needed.

25. Why are computers equipped with multiple layers of cache? Would it not be better to
simply have one big one?

Because one of the most effective ways to improve both bandwidth and latency is to
use multiple caches. A basic technique that works very effectively is to introduce a
separate cache for instructions and data. There are several benefits from having
separate caches for instructions and data, often called a split cache.

26. A computer has a two-level cache. Suppose that 60% of the memory references hit on
the first level cache, 35% hit on the second level, and 5% miss. The access times are 5
nsec, 15 nsec, and 60 nsec, respectively, where the times for the level 2 cache and
memory start counting at the moment it is known that they are needed (e.g., a level 2
cache access does not even start until the level 1 cache miss occurs). What is the aver-
age access time?

The mean access time is 0.6 × 5 + 0.35 × 20 + 0.05 × 80. This gives 14 nsec.

27. At the end of Sec. 4.5.1, we said that write allocation wins only if there are likely to be
multiple writes to the same cache line in a row. What about the case of a write follow-
ed by multiple reads? Would that not also be a big win?

Not really. If the cache is write allocate, then the line will be brought in at
the time of the write, so subsequent reads are free. If the cache is not write
allocate, the write will go through to memory, but the first read will bring the
line in, and the rest of the reads are free. The only gain here is the saving of
one write through to memory. The downside of write allocate is that if there
are no subsequent reads, the line will have been brought in for nothing. Thus
write allocate is a gamble that the line will be written again soon.

28. In the first draft of this book, Fig. 4-39 showed a three-way associative cache instead
of a four-way associative cache. One of the reviewers threw a temper tantrum, claim-
ing that students would be horribly confused by this because 3 is not a power of 2 and
computers do everything in binary. Since the customer is always right, the figure was
changed to a four-way associative cache. Was the reviewer right? Discuss your
answer.

The reviewer was wrong. In an n-way associative cache, there is hardware to
compare all the tags in parallel to the tag portion of the address being looked
up. It does not matter if there are three, four, or 19 comparisons being done
in parallel. Many commercial machines have 3-way associative caches.

29. Many computer architects spend a lot of time making their pipelines deeper. Why?

A deeply pipelined CPU, allows the individual steps to be very short and thus 
the clock frequency high. Many CPUs are designed in essentially this way, especially 
those that have to implement an older (CISC) instruction set. For example, the Core i7 
implementation is conceptually similar to the Mic-4 in some ways.

30. A computer with a five-stage pipeline deals with conditional branches by stalling for
the next three cycles after hitting one. How much does stalling hurt the performance if
20% of all instructions are conditional branches? Ignore all sources of stalling except
conditional branches.

A conditional branch ties up the fetch unit for 4 cycles—one fetch and three
dead cycles after it. The mean number of cycles spent using the fetch unit is
0.8 × 1 + 0.2 × 4 = 1.6 fetch cycles/instruction. Without this problem it
would have been 1.0 fetch cycles per instruction. Thus the average instruction takes 60% 
more time and the machine runs at 1/1.6 or 5/8 of full speed.

31. A computer prefetches up to 20 instructions in advance. However, on the average, four
of these are conditional branches, each with a probability of 90% of being predicted
correctly. What is the probability that the prefetching is on the right track?

Prefetching will only be on the right track if all four branches are correctly
predicted. The chance that this happens is 0.94, which is about 0.66.

32. Suppose that we were to change the design of the machine used in Fig. 4-43 to have 16
registers instead of 8. Then we change I6 to use R8 as its destination. What happens in
the cycles starting at cycle 6?

Cycle 6: I6 and I7 are issued
Cycle 7: I4 is retired
Cycle 8: I5, I6, and I7 are retired
Cycle 9: I8 is issued
Cycle 11: I8 is retired

33. Normally, dependences cause trouble with pipelined CPUs. Are there any optimiza-
tions that can be done with WAW dependences that might actually improve matters?
What?

A WAW dependence occurs when a register that is being written is overwritten before the 
first one is through. If there are no intervening reads of the register and no side effects, 
the first operation is wasted, so it could be removed, aborted early, or have its result overwritten.
